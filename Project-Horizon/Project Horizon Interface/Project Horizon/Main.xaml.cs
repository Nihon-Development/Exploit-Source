using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Threading;
using HorizonXploit;
using Microsoft.Win32;

namespace Project_Horizon
{
    public partial class Main : Window
    {
        private DiscordRpc.EventHandlers handlers;
        private DiscordRpc.RichPresence presence;
		HorizonXploit.Functions Functions = new HorizonXploit.Functions();
        public Main()
        {
            InitializeComponent();
        }
		private void ExitButton_Click(object sender, RoutedEventArgs e)
		{
			Application.Current.Shutdown();
		}

		private void MinimizeButton_Click(object sender, RoutedEventArgs e)
		{
			WindowState = WindowState.Minimized;
		}

		private void Window_MouseDown(object sender, MouseButtonEventArgs e)
		{
			if (e.ChangedButton == MouseButton.Left)
				this.DragMove();
		}
		private void AttachButton_Click(object sender, RoutedEventArgs e)
		{
			Functions.LaunchExploit();
		}
		private void ClearButton_Click(object sender, RoutedEventArgs e)
		{
			this.Monaco.InvokeScript("SetText", new object[]
			{
		""
			});
		}
		private void CloseButton_Click(object sender, RoutedEventArgs e)
		{
			Application.Current.Shutdown();
			File.WriteAllText(@"Bin/Settings/Opacity.dll", "Opacity=0");
			File.WriteAllText(@"Bin/Settings/TopMost.dll", "TopMost=0");
		}
		private void ExecuteButton_Click(object sender, RoutedEventArgs e)
		{
			string scriptName = "GetText";
			object[] args = new string[0];
			object obj = Monaco.InvokeScript(scriptName, args);
			string script = obj.ToString();
			Functions.ExecuteScript(script);
		}
		private void LoadItem_Click(object sender, RoutedEventArgs e)
		{
			bool flag = this.ScriptBox.SelectedIndex != -1;
			if (flag)
			{
				this.Monaco.InvokeScript("SetText", new object[]
				{
			File.ReadAllText(string.Format("./Scripts/{0}", this.ScriptBox.SelectedItem))
				});
			}
		}
		private void MiniButton_Click(object sender, RoutedEventArgs e)
		{
			WindowState = WindowState.Minimized;
		}
		private void MonacoLoad()
		{
			WebClient webClient = new WebClient();
			webClient.Proxy = null;
			try
			{
				RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BROWSER_EMULATION", true);
				string friendlyName = AppDomain.CurrentDomain.FriendlyName;
				bool flag = registryKey.GetValue(friendlyName) == null;
				bool flag2 = flag;
				if (flag2)
				{
					registryKey.SetValue(friendlyName, 11001, RegistryValueKind.DWord);
				}
			}
			catch (Exception)
			{
			}
			string currentDirectory = Directory.GetCurrentDirectory();
			this.Monaco.Navigate(string.Format("file:///{0}/Bin/Monaco/Monaco.html", currentDirectory));
		}
		private void OpenFileButton_Click(object sender, RoutedEventArgs e)
		{
			OpenFileDialog OpenFile = new OpenFileDialog();
			OpenFile.Filter = "Txt Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua";

			if (OpenFile.ShowDialog() == true)
			{
				string Text = File.ReadAllText(OpenFile.FileName);
				Monaco.InvokeScript("SetText", new object[]
				{
					Text
				});
			}
		}
		private void OptionsButton_Click(object sender, RoutedEventArgs e)
		{
			Options Options = new Options();
			this.OptionsButton.Content = "Opening";
			DispatcherTimer timer = new DispatcherTimer
			{
				Interval = TimeSpan.FromSeconds(1.0)
			};
			timer.Start();
			timer.Tick += delegate (object obj, EventArgs args)
			{
				timer.Stop();
				this.OptionsButton.Content = "Options";
				Options.ShowDialog();
			};
		}
		private void RefreshItem_Click(object sender, RoutedEventArgs e)
		{
			this.ScriptBox.Items.Clear();
			DirectoryInfo directoryInfo = new DirectoryInfo("./Scripts");
			FileInfo[] files = directoryInfo.GetFiles("*.txt");
			foreach (FileInfo fileInfo in files)
			{
				this.ScriptBox.Items.Add(fileInfo.Name);
			}
			DirectoryInfo directoryInfo2 = new DirectoryInfo("./Scripts");
			FileInfo[] files2 = directoryInfo2.GetFiles("*.lua");
			foreach (FileInfo fileInfo2 in files2)
			{
				this.ScriptBox.Items.Add(fileInfo2.Name);
			}
		}
		private void SaveFileButton_Click(object sender, RoutedEventArgs e)
		{
			SaveFileDialog SaveFile = new SaveFileDialog();
			SaveFile.Filter = "Txt Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";

			if (SaveFile.ShowDialog() == true)
			{
				Stream s = SaveFile.OpenFile();
				StreamWriter sw = new StreamWriter(s);
				sw.Write(Monaco.InvokeScript("GetText", new object[0]));
				sw.Close();
				s.Close();
			}
		}
		private void Timer1_Tick(object sender, EventArgs e)
		{
			if (File.ReadAllText(@"Bin/Settings/Opacity.dll").Equals("Opacity=1"))
            {
				Opacity = 0.6;
            }
			if (File.ReadAllText(@"Bin/Settings/Opacity.dll").Equals("Opacity=0"))
            {
				Opacity = 1;
			}
		}

		private void Timer2_Tick(object sender, EventArgs e)
        {
			if (File.ReadAllText(@"Bin/Settings/TopMost.dll").Equals("TopMost=1"))
            {
				Topmost = true;
            }
			if (File.ReadAllText(@"Bin/Settings/TopMost.dll").Equals("TopMost=0"))
            {
				Topmost = false;
            }
		}
		private void Window_Loaded(object sender, RoutedEventArgs e)
		{
			DispatcherTimer Timer1 = new DispatcherTimer();
			Timer1.Tick += this.Timer1_Tick;
			Timer1.Interval = new TimeSpan(0, 0, 1);
			Timer1.Start();
			DispatcherTimer Timer2 = new DispatcherTimer();
			Timer2.Tick += this.Timer2_Tick;
			Timer2.Interval = new TimeSpan(0, 0, 1);
			Timer2.Start();
			this.MonacoLoad();
			DirectoryInfo directoryInfo = new DirectoryInfo("./Scripts");
			FileInfo[] files = directoryInfo.GetFiles("*.txt");
			foreach (FileInfo fileInfo in files)
			{
				ScriptBox.Items.Add(fileInfo.Name);
			}
			DirectoryInfo directoryInfo2 = new DirectoryInfo("./Scripts");
			FileInfo[] files2 = directoryInfo2.GetFiles("*.lua");
			foreach (FileInfo fileInfo2 in files2)
			{
				ScriptBox.Items.Add(fileInfo2.Name);
			}
			this.handlers = default(DiscordRpc.EventHandlers);
			DiscordRpc.Initialize("728750518897344546", ref this.handlers, true, null);
			this.handlers = default(DiscordRpc.EventHandlers);
			DiscordRpc.Initialize("728750518897344546", ref this.handlers, true, null);
			this.presence.details = "Exploit, Project Horizon";
			this.presence.state = "#1 Best Free Exploit";
			this.presence.largeImageKey = "largeimage";
			this.presence.smallImageKey = "smallimage";
			this.presence.smallImageText = "ImmuneLion318";
			this.presence.largeImageText = "Project Horizon";
			DiscordRpc.UpdatePresence(ref this.presence);
		}

        private void SciptHubButton_Click(object sender, RoutedEventArgs e)
        {
			ScriptHub scripthub = new ScriptHub();
			this.ScriptHubButton.Content = "Starting...";
			DispatcherTimer timer = new DispatcherTimer
			{
				Interval = TimeSpan.FromSeconds(1.0)
			};
			timer.Start();
			timer.Tick += delegate (object obj, EventArgs args)
			{
				timer.Stop();
				this.ScriptHubButton.Content = "Script Hub";
				scripthub.ShowDialog();
			};
		}

        private void ExecuteItem_Click(object sender, RoutedEventArgs e)
        {
			if (ScriptBox.SelectedIndex != -1)
			{
				Functions.ExecuteScript("./Scripts/" + ScriptBox.SelectedItem.ToString());
			}
		}
    }
}
