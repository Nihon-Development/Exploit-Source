using System;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace Project_Horizon.Classes
{
    public class WeAreDevs
    {
		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool WaitNamedPipe(string name, int timeout);

		public static bool NamedPipeExist(string pipeName)
		{
			bool result;
			try
			{
				int timeout = 0;
				if (!WeAreDevs.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", pipeName)), timeout))
				{
					int lastWin32Error = Marshal.GetLastWin32Error();
					if (lastWin32Error == 0)
					{
						return false;
					}
					if (lastWin32Error == 2)
					{
						return false;
					}
				}
				result = true;
			}
			catch (Exception)
			{
				result = false;
			}
			return result;
		}

		private void SMTP(string pipe, string input)
		{
			if (WeAreDevs.NamedPipeExist(pipe))
			{
				try
				{
					using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", pipe, PipeDirection.Out))
					{
						namedPipeClientStream.Connect();
						using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream))
						{
							streamWriter.Write(input);
							streamWriter.Dispose();
						}
						namedPipeClientStream.Dispose();
					}
					return;
				}
				catch (IOException)
				{
					MessageBox.Show("Connection To Pipe Failed", "Error: Connection Failed", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					return;
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message.ToString());
					return;
				}
			}
			MessageBox.Show("Dll Didn't Inject Properly", "Error: Injection", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}

		private string ReadURL(string url)
		{
			return this.client.DownloadString(url);
		}

		private string GetLatestData()
		{
			string text = this.ReadURL("https://cdn.wearedevs.net/software/exploitapi/latestdata.txt");
			if (text.Length > 0)
			{
				return text;
			}
			string text2 = this.ReadURL("https://pastebin.com/raw/Ly9mJwH7");
			if (text2.Length > 0)
			{
				return text2;
			}
			return "";
		}

		public bool IsUpdated()
		{
			bool result = false;
			string latestData = this.GetLatestData();
			if (latestData.Length > 0)
			{
				result = Convert.ToBoolean(latestData.Split(new char[]
				{
					' '
				})[0]);
			}
			else
			{
				MessageBox.Show("Couldn't Download Latest Version", "Error: Not Updated", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
			return result;
		}

		private bool DownloadLatestVersion()
		{
			if (File.Exists("HorizonSploit.dll"))
			{
				File.Delete("HorizonSploit.dll");
			}
			string latestData = this.GetLatestData();
			if (latestData.Length > 0)
			{
				this.client.DownloadFile(latestData.Split(new char[]
				{
					' '
				})[1], "HorizonSploit.dll");
			}
			return File.Exists("HorizonSploit.dll");
		}

		public bool isAPIAttached()
		{
			return WeAreDevs.NamedPipeExist(this.cmdpipe);
		}

		public bool LaunchExploit()
		{
			if (WeAreDevs.NamedPipeExist(this.cmdpipe))
			{
				MessageBox.Show("Already Attached", "Error: Already Attached", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
			else if (this.IsUpdated())
			{
				if (this.DownloadLatestVersion())
				{
					if (this.injector.InjectDLL())
					{
						return true;
					}
					MessageBox.Show("Injection Failed", "Error: Injection Failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
				}
				else
				{
					MessageBox.Show("Couldn't Download Latest Version", "Error: Not Updated", MessageBoxButtons.OK, MessageBoxIcon.Error);
				}
			}
			else
			{
				MessageBox.Show("Project Horizon Is Currently Patched Please Try Again Later", "Error: Patched", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
			return false;
		}

		public void SendCommand(string Command)
		{
			this.SMTP(this.cmdpipe, Command);
		}

		public void SendScript(string script)
		{
			this.SendLuaCScript(script);
		}

		public void SendLuaCScript(string Script)
		{
			foreach (string input in Script.Split("\r\n".ToCharArray()))
			{
				try
				{
					this.SMTP(this.luacpipe, input);
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message.ToString());
				}
			}
		}

		public void SendLimitedLuaScript(string script)
		{
			this.SendLuaScript(script);
		}

		public void SendLuaScript(string Script)
		{
			this.SMTP(this.luapipe, Script);
		}

		public void LuaC_getglobal(string service)
		{
			this.SendLuaCScript("getglobal " + service);
		}

		public void LuaC_getfield(int index, string instance)
		{
			this.SendLuaCScript("getglobal " + index.ToString() + " " + instance);
		}

		public void LuaC_setfield(int index, string property)
		{
			this.SendLuaCScript("setfield " + index.ToString() + " " + property);
		}

		public void LuaC_pushvalue(int index)
		{
			this.SendLuaCScript("pushvalue " + index.ToString());
		}

		public void LuaC_pushstring(string text)
		{
			this.SendLuaCScript("pushstring " + text);
		}

		public void LuaC_pushnumber(int number)
		{
			this.SendLuaCScript("pushnumber " + number.ToString());
		}

		public void LuaC_pcall(int numberOfArguments, int numberOfResults, int ErrorFunction)
		{
			this.SendLuaCScript(string.Concat(new string[]
			{
				"pushnumber ",
				numberOfArguments.ToString(),
				" ",
				numberOfResults.ToString(),
				" ",
				ErrorFunction.ToString()
			}));
		}

		public void LuaC_settop(int index)
		{
			this.SendLuaCScript("settop " + index.ToString());
		}

		public void LuaC_pushboolean(string value = "false")
		{
			this.SendLuaCScript("pushboolean " + value);
		}

		public void LuaC_gettop()
		{
			this.SendLuaCScript("gettop");
		}

		public void LuaC_pushnil()
		{
			this.SendLuaCScript("pushnil");
		}

		public void LuaC_next(int index)
		{
			this.SendLuaCScript("next");
		}

		public void LuaC_pop(int quantity)
		{
			this.SendLuaCScript("pop " + quantity.ToString());
		}

		public void DoBTools(string username = "me")
		{
			this.SendCommand("btools " + username);
		}

		public void DoKill(string username = "me")
		{
			this.SendCommand("kill " + username);
		}

		public void CreateForceField(string username = "me")
		{
			this.SendCommand("ff " + username);
		}

		public void RemoveForceField(string username = "me")
		{
			this.SendCommand("noff " + username);
		}

		public void DoFloat(string username = "me")
		{
			this.SendCommand("float " + username);
		}

		public void DoNoFloat(string username = "me")
		{
			this.SendCommand("nofloat " + username);
		}

		public void RemoveLimbs(string username = "me")
		{
			this.SendCommand("nolimbs " + username);
		}

		public void RemoveArms(string username = "me")
		{
			this.SendCommand("noarms " + username);
		}

		public void RemoveLegs(string username = "me")
		{
			this.SendCommand("nolegs " + username);
		}

		public void AddFire(string username = "me")
		{
			this.SendCommand("fire " + username);
		}

		public void RemoveFire(string username = "me")
		{
			this.SendCommand("nofire " + username);
		}

		public void AddSparkles(string username = "me")
		{
			this.SendCommand("sparkles " + username);
		}

		public void RemoveSparkles(string username = "me")
		{
			this.SendCommand("nosparkles " + username);
		}

		public void AddSmoke(string username = "me")
		{
			this.SendCommand("smoke " + username);
		}

		public void DoBlockHead(string username = "me")
		{
			this.SendCommand("blockhead " + username);
		}

		public void ForceBubbleChat(string username = "me", string text = "WeAreDevs Website")
		{
			this.SendCommand("chat " + username + " " + text);
		}

		public void ConsolePrint(string text = "WeAreDevs Website")
		{
			this.SendCommand("print " + text);
		}

		public void ConsoleWarn(string text = "meWeAreDevs Website")
		{
			this.SendCommand("warn " + text);
		}

		public void SetWalkSpeed(string username = "me", int value = 100)
		{
			this.SendCommand("speed " + username + " " + value.ToString());
		}

		public void ToggleClickTeleport()
		{
			this.SendCommand("toggleclickteleport");
		}

		public void SetFogEnd(int value = 0)
		{
			this.SendCommand("fogend " + value.ToString());
		}

		public void SetJumpPower(int value = 100)
		{
			this.SendCommand("jumppower " + value.ToString());
		}

		public void TeleportMyCharacterTo(string target_username = "me")
		{
			this.SendCommand("teleport " + target_username);
		}

		public void PlaySoundInGame(string assetid = "1071384374")
		{
			this.SendCommand("music " + assetid);
		}

		public void SetSkyboxImage(string assetid = "2143522")
		{
			this.SendCommand("skybox " + assetid);
		}

		public WeAreDevs()
		{
		}

		private WebClient client = new WebClient();

		private WeAreDevs.BasicInject injector = new WeAreDevs.BasicInject();

		private string cmdpipe = "WeAreDevsPublicAPI_CMD";

		private string luacpipe = "WeAreDevsPublicAPI_LuaC";

		private string luapipe = "WeAreDevsPublicAPI_Lua";

		private class BasicInject
		{
			[DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
			internal static extern IntPtr LoadLibraryA(string lpFileName);

			[DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
			internal static extern UIntPtr GetProcAddress(IntPtr hModule, string procName);

			[DllImport("kernel32.dll", SetLastError = true)]
			[return: MarshalAs(UnmanagedType.Bool)]
			internal static extern bool FreeLibrary(IntPtr hModule);

			[DllImport("kernel32.dll")]
			internal static extern IntPtr OpenProcess(WeAreDevs.BasicInject.ProcessAccess dwDesiredAccess, [MarshalAs(UnmanagedType.Bool)] bool bInheritHandle, int dwProcessId);

			[DllImport("kernel32.dll", ExactSpelling = true, SetLastError = true)]
			internal static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

			[DllImport("kernel32.dll", SetLastError = true)]
			internal static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

			[DllImport("kernel32.dll")]
			internal static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, UIntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

			[DllImport("kernel32.dll", SetLastError = true)]
			internal static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out int lpNumberOfBytesRead);


			public bool InjectDLL()
			{
				if (Process.GetProcessesByName("RobloxPlayerBeta").Length == 0)
				{
					return false;
				}
				Process process = Process.GetProcessesByName("RobloxPlayerBeta")[0];
				byte[] bytes = new ASCIIEncoding().GetBytes(AppDomain.CurrentDomain.BaseDirectory + "HorizonSploit.dll");
				IntPtr hModule = WeAreDevs.BasicInject.LoadLibraryA("kernel32.dll");
				UIntPtr procAddress = WeAreDevs.BasicInject.GetProcAddress(hModule, "LoadLibraryA");
				WeAreDevs.BasicInject.FreeLibrary(hModule);
				if (procAddress == UIntPtr.Zero)
				{
					return false;
				}
				IntPtr intPtr = WeAreDevs.BasicInject.OpenProcess(WeAreDevs.BasicInject.ProcessAccess.AllAccess, false, process.Id);
				if (intPtr == IntPtr.Zero)
				{
					return false;
				}
				IntPtr intPtr2 = WeAreDevs.BasicInject.VirtualAllocEx(intPtr, (IntPtr)0, (uint)bytes.Length, 12288U, 4U);
				UIntPtr uintPtr;
				IntPtr intPtr3;
				return !(intPtr2 == IntPtr.Zero) && WeAreDevs.BasicInject.WriteProcessMemory(intPtr, intPtr2, bytes, (uint)bytes.Length, out uintPtr) && !(WeAreDevs.BasicInject.CreateRemoteThread(intPtr, (IntPtr)0, 0U, procAddress, intPtr2, 0U, out intPtr3) == IntPtr.Zero);
			}

			public BasicInject()
			{
			}

			[Flags]
			public enum ProcessAccess
			{
				AllAccess = 1050235,
				CreateThread = 2,
				DuplicateHandle = 64,
				QueryInformation = 1024,
				SetInformation = 512,
				Terminate = 1,
				VMOperation = 8,
				VMRead = 16,
				VMWrite = 32,
				Synchronize = 1048576
			}
		}
	}
}
