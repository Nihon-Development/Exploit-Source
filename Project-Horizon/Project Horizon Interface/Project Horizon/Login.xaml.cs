using HorizonXploit;
using Microsoft.Win32;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Management;
using System.Net;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Markup;

namespace Project_Horizon
{
    public partial class MainWindow : Window
	{ 
		private DiscordRpc.EventHandlers handlers;
		private DiscordRpc.RichPresence presence;
		public static string Version = "2.3.7";
		public MainWindow()
        {
            InitializeComponent();
			DiscordPresence();
			CheckForUpdate();

			if (!IsWin10())
			{
				MessageBox.Show("Project Horizon Does Not Have Support For Versions Under Windows 10 Please Upgrade And Try Again", "Error: Version Not Supported", MessageBoxButton.OK, MessageBoxImage.Error);
				Close();
			}
		}
		private async void CheckForUpdate()
		{
			using (WebClient WebClient = new WebClient())
			{
				if (Version.Equals(WebClient.DownloadString("https://pastebin.com/raw/rFWKrnm7"), StringComparison.InvariantCultureIgnoreCase))
				{
					return;
				}
				else
				{
					if (MessageBox.Show("Project Horizon Requires A Update To Continue Would You Like To Download The Update", "Error: Update Required", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
					{
						await Task.Delay(1500);
						Process.Start("https://cdn.discordapp.com/attachments/704068405019541565/734036938150904008/Project_Horizon_Bootstrapper.exe");
						Close();
					}
					else
					{
						Close();
					}
				}
			}
		}
		static bool IsWin10()
		{
			var Reg = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion");
			string ProductName = (string)Reg.GetValue("ProductName");
			return ProductName.StartsWith("Windows 10");
		}
		private void CloseButton_Click(object sender, RoutedEventArgs e)
		{
			Application.Current.Shutdown();
		}

		private void MiniButton_Click(object sender, RoutedEventArgs e)
		{
			WindowState = WindowState.Minimized;
		}
		private void LoginButton_Click(object sender, RoutedEventArgs e)
		{
			string Link = "https://pastebin.com/raw/RAgwK1wY";
			WebClient WebClient = new WebClient();
			string Key = WebClient.DownloadString(Link);
			if (PasswordBox.Password == Key)
			{
				MessageBox.Show("Thanks " + Environment.UserName + " For Using Project Horizon", "Project Horizon", MessageBoxButton.OK, MessageBoxImage.Information);
				MessageBox.Show("Project Horizon Made By ImmuneLion318", "Project Horizon", MessageBoxButton.OK, MessageBoxImage.Information);
				this.Hide();
				LoaderWindow loaderWindow = new LoaderWindow();
				loaderWindow.Show();
			}
			else
			{
				MessageBox.Show("Invalid Or Incorrect Key!", "Error: Password Incorrect", MessageBoxButton.OK, MessageBoxImage.Error);
			}
		}

		private void GetkeyButton_Click(object sender, RoutedEventArgs e)
		{
			Process.Start("https://direct-link.net/48806/HrDevs");
		}

		private void Window_MouseDown(object sender, MouseButtonEventArgs e)
		{
			if (e.ChangedButton == MouseButton.Left)
				this.DragMove();
		}

		private void DiscordPresence()
		{
			this.InitializeComponent();
			this.handlers = default(DiscordRpc.EventHandlers);
			DiscordRpc.Initialize("728750518897344546", ref this.handlers, true, null);
			this.handlers = default(DiscordRpc.EventHandlers);
			DiscordRpc.Initialize("728750518897344546", ref this.handlers, true, null);
			this.presence.details = "Exploit, Project Horizon";
			this.presence.state = "#1 Best Free Exploit";
			this.presence.largeImageKey = "largeimage";
			this.presence.smallImageKey = "smallimage";
			this.presence.smallImageText = "ImmuneLion318";
			this.presence.largeImageText = "Project Horizon";
			DiscordRpc.UpdatePresence(ref this.presence);
		}

		private void Window_Loaded(object sender, RoutedEventArgs e)
		{

		}
	}
}
