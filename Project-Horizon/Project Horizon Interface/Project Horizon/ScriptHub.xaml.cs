using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Threading;
using HorizonXploit;
using Microsoft.Win32;

namespace Project_Horizon
{
    public partial class ScriptHub : Window
    {
        HorizonXploit.Functions Functions = new HorizonXploit.Functions();
        public ScriptHub()
        {
            InitializeComponent();
        }
        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            this.Hide();
        }
        private void ExecuteButton_Click(object sender, RoutedEventArgs e)
        {
            string scriptName = "GetText";
            object[] args = new string[0];
            object obj = TextEditor.InvokeScript(scriptName, args);
            string script = obj.ToString();
            Functions.ExecuteScript(script);
        }
        private void RefreshScript_Click(object sender, RoutedEventArgs e)
        {
            this.ScriptBox.Items.Clear();
            DirectoryInfo directoryInfo = new DirectoryInfo("./Bin/Script Hub");
            FileInfo[] files = directoryInfo.GetFiles("*.txt");
            foreach (FileInfo fileInfo in files)
            {
                this.ScriptBox.Items.Add(fileInfo.Name);
            }
            DirectoryInfo directoryInfo2 = new DirectoryInfo("./Bin/Script Hub");
            FileInfo[] files2 = directoryInfo2.GetFiles("*.lua");
            foreach (FileInfo fileInfo2 in files2)
            {
                this.ScriptBox.Items.Add(fileInfo2.Name);
            }
        }
        private void SaveScript_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog SaveFile = new SaveFileDialog();
            SaveFile.Filter = "Txt Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";

            if (SaveFile.ShowDialog() == true)
            {
                Stream s = SaveFile.OpenFile();
                StreamWriter sw = new StreamWriter(s);
                sw.Write(TextEditor.InvokeScript("GetText", new object[0]));
                sw.Close();
                s.Close();
            }
        }
        private void ScriptBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            bool flag = this.ScriptBox.SelectedIndex != -1;
            if (flag)
            {
                this.TextEditor.InvokeScript("SetText", new object[]
                {
            File.ReadAllText("./Bin/Script Hub/" + this.ScriptBox.SelectedItem.ToString())
                });
            }
        }
        private void Timer1_Tick(object sender, EventArgs e)
        {
            if (File.ReadAllText("Bin/Settings/Opacity.dll").Equals("Opacity=1"))
            {
                base.Opacity = 0.6;
            }
            if (File.ReadAllText("Bin/Settings/Opacity.dll").Equals("Opacity=0"))
            {
                base.Opacity = 1.0;
            }
        }
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            DispatcherTimer dispatcherTimer = new DispatcherTimer();
            dispatcherTimer.Tick += this.Timer1_Tick;
            dispatcherTimer.Interval = new TimeSpan(0, 0, 1);
            dispatcherTimer.Start();
            WebClient webClient = new WebClient();
            webClient.Proxy = null;
            try
            {
                RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BROWSER_EMULATION", true);
                string friendlyName = AppDomain.CurrentDomain.FriendlyName;
                bool flag = registryKey.GetValue(friendlyName) == null;
                bool flag2 = flag;
                if (flag2)
                {
                    registryKey.SetValue(friendlyName, 11001, RegistryValueKind.DWord);
                }
            }
            catch (Exception)
            {
            }
            string currentDirectory = Directory.GetCurrentDirectory();
            this.TextEditor.Navigate(string.Format("file:///{0}/Bin/Editor/Editor.html", currentDirectory));
            DirectoryInfo directoryInfo = new DirectoryInfo("./Bin/Script Hub");
            FileInfo[] files = directoryInfo.GetFiles("*.txt");
            foreach (FileInfo fileInfo in files)
            {
                this.ScriptBox.Items.Add(fileInfo.Name);
            }
            DirectoryInfo directoryInfo2 = new DirectoryInfo("./Bin/Script Hub");
            FileInfo[] files2 = directoryInfo2.GetFiles("*.lua");
            foreach (FileInfo fileInfo2 in files2)
            {
                this.ScriptBox.Items.Add(fileInfo2.Name);
            }
        }
        private void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
                this.DragMove();
        }
    }
}
