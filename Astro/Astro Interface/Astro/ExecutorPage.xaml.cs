using ICSharpCode.AvalonEdit;
using ICSharpCode.AvalonEdit.Highlighting;
using ICSharpCode.AvalonEdit.Highlighting.Xshd;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using System.Xml;

namespace Astro
{
    public partial class ExecutorPage : Page
    {
        AstroXploit.Module Functions = new AstroXploit.Module();
        private ScrollViewer tabScroller;
        public ExecutorPage()
        {
            InitializeComponent();
            PageLoaded();
            AvalonEditor.Options.EnableHyperlinks = false;
            AvalonEditor.Options.EnableHyperlinks = false;
            AvalonEditor.Options.AllowScrollBelowDocument = true;
        }
        private async void AutoAttach(object sender, EventArgs e)
        {
            if (File.ReadAllText(@"Bin/Settings/AutoInject.dll").Equals("AutoInject=1"))
            {
                Process[] DetectingRoblox = Process.GetProcessesByName("RobloxPlayerBeta");
                if (DetectingRoblox.Length > 0)
                {
                    await Task.Delay(10000);
                    Functions.LaunchExploit();
                }
            }
        }
        private void PageLoaded()
        {
            DispatcherTimer AutoAttachTimer = new DispatcherTimer();
            AutoAttachTimer.Tick += this.AutoAttach;
            AutoAttachTimer.Start();

            DirectoryInfo directoryInfo = new DirectoryInfo("./Scripts");
            FileInfo[] files = directoryInfo.GetFiles("*.txt");
            foreach (FileInfo fileInfo in files)
            {
                ScriptBox.Items.Add(fileInfo.Name);
            }
            DirectoryInfo directoryInfo2 = new DirectoryInfo("./Scripts");
            FileInfo[] files2 = directoryInfo2.GetFiles("*.lua");
            foreach (FileInfo fileInfo2 in files2)
            {
                ScriptBox.Items.Add(fileInfo2.Name);
            }

            Stream xshd_stream = File.OpenRead(Environment.CurrentDirectory + @"\Bin\" + "Syntax.dll");
            XmlTextReader xshd_reader = new XmlTextReader(xshd_stream);
            AvalonEditor.SyntaxHighlighting = HighlightingLoader.Load(xshd_reader, HighlightingManager.Instance);

            xshd_reader.Close();
            xshd_stream.Close();
            this.EditTabs.Loaded += delegate (object source, RoutedEventArgs e)
            {
                this.EditTabs.GetTemplateItem<Button>("AddTabButton").Click += delegate (object s, RoutedEventArgs f)
                {
                    this.MakeTab("", "New Tab");
                };

                TabItem ti = EditTabs.SelectedItem as TabItem;
                ti.GetTemplateItem<Button>("CloseButton").Visibility = Visibility.Hidden;
                ti.GetTemplateItem<Button>("CloseButton").Width = 0;
                ti.Header = "Main Tab";

                this.tabScroller = this.EditTabs.GetTemplateItem<ScrollViewer>("TabScrollViewer");
            };
        }
        private void LoadItem_Click(object sender, RoutedEventArgs e)
        {
            if (ScriptBox.SelectedIndex != -1)
            {
                GetCurrent().Text = File.ReadAllText($"./Scripts/{ScriptBox.SelectedItem}");
            }
        }

        private void RefreshItem_Click(object sender, RoutedEventArgs e)
        {
            this.ScriptBox.Items.Clear();
            DirectoryInfo directoryInfo = new DirectoryInfo("./Scripts");
            FileInfo[] files = directoryInfo.GetFiles("*.txt");
            foreach (FileInfo fileInfo in files)
            {
                this.ScriptBox.Items.Add(fileInfo.Name);
            }
            DirectoryInfo directoryInfo2 = new DirectoryInfo("./Scripts");
            FileInfo[] files2 = directoryInfo2.GetFiles("*.lua");
            foreach (FileInfo fileInfo2 in files2)
            {
                this.ScriptBox.Items.Add(fileInfo2.Name);
            }
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog sfd = new SaveFileDialog();
            sfd.Filter = "Txt Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";

            if (sfd.ShowDialog() == true)
            {
                Stream s = sfd.OpenFile();
                StreamWriter sw = new StreamWriter(s);
                sw.Write(GetCurrent().Text);
                sw.Close();
                s.Close();
            }
        }

        private void AttachButton_Click(object sender, RoutedEventArgs e)
        {
            Functions.LaunchExploit();
        }

        private void OpenButton_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            ofd.Filter = "Txt Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua";

            if (ofd.ShowDialog() == true)
            {
                GetCurrent().Text = File.ReadAllText(ofd.FileName);
            }
        }

        private void ClearButton_Click(object sender, RoutedEventArgs e)
        {
            GetCurrent().Text = "";
        }

        private void ExecuteButton_Click(object sender, RoutedEventArgs e)
        {
            Functions.ExecuteScript(GetCurrent().Text);
        }

        private void DropTab(object sender, DragEventArgs e)
        {
            TabItem TabItem = e.Source as TabItem;
            if (TabItem != null)
            {
                TabItem TabItem2 = e.Data.GetData(typeof(TabItem)) as TabItem;
                if (TabItem2 != null)
                {
                    if (!TabItem.Equals(TabItem2))
                    {
                        TabControl TabControl = TabItem.Parent as TabControl;
                        int insertIndex = TabControl.Items.IndexOf(TabItem2);
                        int num = TabControl.Items.IndexOf(TabItem);
                        TabControl.Items.Remove(TabItem2);
                        TabControl.Items.Insert(num, TabItem2);
                        TabControl.Items.Remove(TabItem);
                        TabControl.Items.Insert(insertIndex, TabItem);
                        TabControl.SelectedIndex = num;
                    }
                    return;
                }
            }
        }

        private void ScrollTabs(object sender, MouseWheelEventArgs e)
        {
            this.tabScroller.ScrollToHorizontalOffset(this.tabScroller.HorizontalOffset + (double)(e.Delta / 10));
        }

        private void MoveTab(object sender, MouseEventArgs e)
        {
            TabItem tabItem = e.Source as TabItem;
            if (tabItem == null)
            {
                return;
            }
            if (Mouse.PrimaryDevice.LeftButton == MouseButtonState.Pressed)
            {
                if (VisualTreeHelper.HitTest(tabItem, Mouse.GetPosition(tabItem)).VisualHit is Button)
                {
                    return;
                }
                DragDrop.DoDragDrop(tabItem, tabItem, DragDropEffects.Move);
            }
        }

        private TextEditor CurrentTab;

        public TextEditor GetCurrent()
        {
            if (this.EditTabs.Items.Count == 0)
            {
                return AvalonEditor;
            }
            else
            {
                return this.CurrentTab = (this.EditTabs.SelectedContent as TextEditor);
            }
        }

        public TextEditor MakeEditor()
        {
            TextEditor TextEditor = new TextEditor
            {
                ShowLineNumbers = true,
                Background = new SolidColorBrush(Color.FromRgb(30, 30, 30)),
                Foreground = new SolidColorBrush(Color.FromRgb(255, 255, byte.MaxValue)),
                Margin = new Thickness(0, 0, 0, 0),
                FontFamily = new FontFamily("Consolas"),
                Style = (this.TryFindResource("TextEditorStyle") as Style),
                HorizontalScrollBarVisibility = ScrollBarVisibility.Visible,
                VerticalScrollBarVisibility = ScrollBarVisibility.Visible
            };
            TextEditor.Options.EnableEmailHyperlinks = false;
            TextEditor.Options.EnableHyperlinks = false;
            TextEditor.Options.AllowScrollBelowDocument = true;
            Stream xshd_stream = File.OpenRead(Environment.CurrentDirectory + @"\Bin\" + "Syntax.dll");
            XmlTextReader xshd_reader = new XmlTextReader(xshd_stream);
            TextEditor.SyntaxHighlighting = HighlightingLoader.Load(xshd_reader, HighlightingManager.Instance);

            xshd_reader.Close();
            xshd_stream.Close();
            return TextEditor;
        }

        public TabItem MakeTab(string Text = "", string Title = "Script")
        {
            Title = Title + " " + EditTabs.Items.Count.ToString();
            bool loaded = false;
            TextEditor TextEditor = MakeEditor();
            TextEditor.Text = Title;
            TabItem Tab = new TabItem
            {
                Content = TextEditor,
                Style = (base.TryFindResource("Tab") as Style),
                AllowDrop = true,
                Header = Title
            };
            Tab.MouseWheel += this.ScrollTabs;
            Tab.Loaded += delegate (object source, RoutedEventArgs e)
            {
                if (loaded)
                {
                    return;
                }
                this.tabScroller.ScrollToRightEnd();
                loaded = true;
            };
            Tab.MouseDown += delegate (object sender, MouseButtonEventArgs e)
            {
                if (e.OriginalSource is Border)
                {
                    if (e.MiddleButton == MouseButtonState.Pressed)
                    {
                        this.EditTabs.Items.Remove(Tab);
                        return;
                    }
                }
            };

            Tab.Loaded += delegate (object s, RoutedEventArgs e)
            {
                Tab.GetTemplateItem<Button>("CloseButton").Click += delegate (object r, RoutedEventArgs f)
                {
                    this.EditTabs.Items.Remove(Tab);
                };

                this.tabScroller.ScrollToRightEnd();
                loaded = true;
            };

            Tab.MouseMove += this.MoveTab;
            Tab.Drop += this.DropTab;
            string oldHeader = Title;
            this.EditTabs.SelectedIndex = this.EditTabs.Items.Add(Tab);
            return Tab;
        }
    }
}
